maxPrimeFactors(23)
maxPrimeFactors <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(max(y))
}
maxPrimeFactors(24)
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
maxPrimeFactors <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(max(y))
}
maxPrimeFactors(600851475143)
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
maxPrimeFactors <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(max(y))
}
maxPrimeFactors(1000)
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
maxPrimeFactors <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(max(y))
}
maxPrimeFactors(87686868)
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
maxPrimeFactor <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(max(y))
}
maxPrimeFactor(87686868)
isPrimeNumber(600851475143)
600851475143/2
600851475143/7
maxPrimeFactor(85835925020)
85835925020/2
42917962510/2
21458981255/5
maxPrimeFactor(4291796251)
600851475143/7/2/2/5
4291796251/3
1430598750/2
600851475143/7/2/2/5/3/2/5
600851475143/7/2/2/5/3/2/5/5
600851475143/7/2/2/5/3/2/5/5/5
600851475143/7/2/2/5/3/2/5/5/5/5
600851475143/7/2/2/5/3/2/5/5/5/5/3
maxPrimeFactor(381493)
600851475143/7/2/2/5/3/2/5/5/5/5/3
maxPrimeFactor(381493)
maxPrimeFactor(13195)
381493/54499
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
maxPrimeFactor <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(y)
}
maxPrimeFactor(13195)
600851475143/7/2/2/5/3/2/5/5/5/5/3
maxPrimeFactor(381493)
600851475143/7/2/2/5/3/2/5/5/5/5/3
600851475143/7/2/2/5/3/2/5/5/5/5/3/7
maxPrimeFactor(54499)
5 * 7 * 13 * 29
54499/6857
600851475143/54499
maxPrimeFactor(13195)
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
primeFactors <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(y)
}
600851475143/7/2/2/5/3/2/5/5/5/5/3/7
primeFactors(13195)
600851475143/7/2/2/5/3/2/5/5/5/5/3/7
600851475143/7/2/2/5/3/2/5/5/5/5/3/7/54499
primeFactors(54499)
primeFactors(600851475143/7/2/2/5/3/2/5)
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
isPrimeNumber <- function(x) {
count <- 0
y <- TRUE
for (i in 2:round(x/2))
if (x %% i == 0) count++
if (count == 0) y <- FALSE
return(y)
}
primeFactors <- function (x) {
if (isPrimeNumber(x)) return(x)
y <- 1
for (i in 2: round(x/2)) {
if (x %% i == 0 && isPrimeNumber(i)) y <- c(y, i)
}
return(y)
}
600851475143/7/2/2/5/3/2/5/5/5/5/3/7/54499
primeFactors(600851475143/7/2/2/5/3/2/5)
primeFactors(143059875)
54499/6857
600851475143/6857
600851475143/54499
54499/6857
primeFactors(11025000)
11025000/6857
600851475143/3
200283825048/2
primeFactors(200283825048)
x <- 828763578
log(x)
10^20
log(1000)
10^3
log10(1000)
log10(x)
x <- 828763578
log10(x)
log10(x) / log10(x)
log10(x) %% log10(x)
log10(x)
round(log10(x))
floor(log10(x))
x %% 10^0
x %% 10
x %% 100
floor(x %% 100) / 10
floor((x %% 100) / 10)
floor((x %% 10) / 1)
test <- c(1,2,3 4,5)
test <- c(1,2,3 4,5)
test <- c(1,2,3, 4,5)
test(2:end)
test[2:end]
test <- c(1,2,3, 4,5)
test[2:end]
test
test[2]
test[2:]
test[2:length(test)]
isPalindrom <- function(x) {
maxpot <- floor(log10(x))
digits <- 0
for(i in 1:maxpot+1) {
tmp <- floor((x %% (10^i)) / (10^(i-1)))
digits <- c(digits, tmp)
}
return(digits[2:length(digits)])
}
isPalindrom(333)
isPalindrom <- function(x) {
maxpot <- floor(log10(x))
print(maxpot)
digits <- 0
for(i in 1:maxpot+1) {
print(i)
tmp <- floor((x %% (10^i)) / (10^(i-1)))
print(tmp)
digits <- c(digits, tmp)
print(digits)
}
return(digits[2:length(digits)])
}
isPalindrom(333)
isPalindrom <- function(x) {
maxpot <- floor(log10(x))
print(maxpot)
digits <- 0
for(i in 1:maxpot+1) {
print(i)
tmp <- floor((x %% (10^i)) / (10^(i-1)))
print(tmp)
digits <- c(digits, tmp)
print(digits)
}
return(digits[2:length(digits)])
}
isPalindrom(333)
x <- 333
maxpot <- floor(log10(x))
maxpot
digits <- 0
for(i in 1:maxpot+1) {
print(i)
tmp <- floor((x %% (10^i)) / (10^(i-1)))
print(tmp)
digits <- c(digits, tmp)
print(digits)
}
for(i in 1:5) print i
for(i in 1:5) print(i)
isPalindrom <- function(x) {
maxpot <- floor(log10(x))
print(maxpot)
digits <- 0
for(i in 1:(maxpot+1)) {
print(i)
tmp <- floor((x %% (10^i)) / (10^(i-1)))
print(tmp)
digits <- c(digits, tmp)
print(digits)
}
return(digits[2:length(digits)])
}
isPalindrom(333)
isPalindrom <- function(x) {
maxpot <- floor(log10(x))
# print(maxpot)
digits <- 0
for(i in 1:(maxpot+1)) {
# print(i)
tmp <- floor((x %% (10^i)) / (10^(i-1)))
# print(tmp)
digits <- c(digits, tmp)
# print(digits)
}
return(digits[2:length(digits)])
}
isPalindrom(333)
isPalindrom(6784566)
digitList <- function(x) {
maxpot <- floor(log10(x))
# print(maxpot)
digits <- 0
for(i in 1:(maxpot+1)) {
# print(i)
tmp <- floor((x %% (10^i)) / (10^(i-1)))
# print(tmp)
digits <- c(digits, tmp)
# print(digits)
}
return(digits[length(digits):2])
}
digitList(6784566)
digitList(8394274242)
isPalindrom <- function(x) {
if(digitList(x) == digitList(x)[length(digitList(x)):1]) return TRUE
else
return FALSE
}
isPalindrom <- function(x) {
if(digitList(x) == digitList(x)[length(digitList(x)):1]) return(TRUE)
else
return(FALSE)
}
isPalindrom(123321)
digitList(123321)
digitList(123321)
length(digitList(123321))
digitList(123321)[length(digitList(123321)):1]
isPalindrom <- function(x) {
if(digitList(x) == digitList(x)[length(digitList(x)):1]) return(TRUE)
else return(FALSE)
}
digitList(123321) == digitList(123321)[length(digitList(123321)):1]
rtl <- digitList(123321)
ltr <- digitList(123321)[length(digitList(123321)):1])
ltr <- digitList(123321)[length(digitList(123321)):1]
ltr
rtl
rtl == ltr
isPalindrom(122)
isPalindrom <- function(x) {
ltr <- digitList(x)
rtl <- digitList(x)[length(digitList(x)):1])
for(i in 1:length(ltr))
if(ltr[i] != rtl[i]) return(FALSE)
return(TRUE)
}
isPalindrom <- function(x) {
ltr <- digitList(x)
rtl <- digitList(x)[length(digitList(x)):1]
for(i in 1:length(ltr))
if(ltr[i] != rtl[i]) return(FALSE)
return(TRUE)
}
isPalindrom(122)
isPalindrom(1221)
isPalindrom(1221221)
isPalindrom(12212211)
isPalindrom(5434345)
isPalindrom(543345)
isPalindrom(45654)
10^(2+1)-1
10^2-1
a <- b <- 10^4-1
a
b
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
for(i in x:1)
for(j in y:1)
if(isPalindrom(x*y)) return(x*y)
}
maxPalindromAmongProductsOf2NDigitNumbers(1)
maxPalindromAmongProductsOf2NDigitNumbers(2)
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
for(i in x:1)
for(j in y:1)
if(isPalindrom(i*j)) return(i*j)
}
maxPalindromAmongProductsOf2NDigitNumbers(1)
maxPalindromAmongProductsOf2NDigitNumbers(2)
maxPalindromAmongProductsOf2NDigitNumbers(3)
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
print(x)
print(y)
for(i in x:1)
for(j in y:1)
if(isPalindrom(i*j)) {
print(i)
print(j)
return(i*j)
}
}
maxPalindromAmongProductsOf2NDigitNumbers(2)
maxPalindromAmongProductsOf2NDigitNumbers(1)
maxPalindromAmongProductsOf2NDigitNumbers(3)
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
print(x)
print(y)
for(i in x:(10^(N-1)))
for(j in x:(10^(N-1)))
if(isPalindrom(i*j)) {
print(i)
print(j)
return(i*j)
}
}
maxPalindromAmongProductsOf2NDigitNumbers(3)
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
print(x)
print(y)
for(i in x:(10^(N-1)))
for(j in x:(10^(N-1)))
if(isPalindrom(i*j) palindrom <- c(palindrom, i*j)
return(max(palindrom))
}
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
print(x)
print(y)
for(i in x:(10^(N-1)))
for(j in x:(10^(N-1)))
if(isPalindrom(i*j)) palindrom <- c(palindrom, i*j)
return(max(palindrom))
}
maxPalindromAmongProductsOf2NDigitNumbers(2)
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
palindrom <- 0
print(x)
print(y)
for(i in x:(10^(N-1)))
for(j in x:(10^(N-1)))
if(isPalindrom(i*j)) palindrom <- c(palindrom, i*j)
return(max(palindrom))
}
maxPalindromAmongProductsOf2NDigitNumbers(2)
maxPalindromAmongProductsOf2NDigitNumbers(1)
maxPalindromAmongProductsOf2NDigitNumbers(3)
# A palindromic number reads the same both ways.
# The largest palindrome made from the product of two
# 2-digit numbers is 9009 = 91 Ã— 99.
#
# Find the largest palindrome made from the product of
# two 3-digit numbers.
digitList <- function(x) {
maxpot <- floor(log10(x))
digits <- 0
for(i in 1:(maxpot+1)) {
tmp <- floor((x %% (10^i)) / (10^(i-1)))
digits <- c(digits, tmp)
}
return(digits[length(digits):2])
}
isPalindrom <- function(x) {
ltr <- digitList(x)
rtl <- digitList(x)[length(digitList(x)):1]
for(i in 1:length(ltr))
if(ltr[i] != rtl[i]) return(FALSE)
return(TRUE)
}
maxPalindromAmongProductsOf2NDigitNumbers <- function(N) {
x <- y <- 10^N-1
palindrom <- 0
for(i in x:(10^(N-1)))
for(j in x:(10^(N-1)))
if(isPalindrom(i*j)) palindrom <- c(palindrom, i*j)
return(max(palindrom))
}
maxPalindromAmongProductsOf2NDigitNumbers(3)
1 * 2 * 3
smallestNumberEvenlyDivisiblefrom1ToN <- function(N) {
count <- 0
sum <- 1
for (i in 1:N) {
for (j in 1:i)
if (j %% i == 0) count++
if(count != 0) sum <- sum*j
}
}
smallestNumberEvenlyDivisiblefrom1ToN <- function(N) {
count <- 0
sum <- 1
for (i in 1:N) {
print(i)
for (j in 1:i) {
print(j)
if (j %% i == 0) count++
}
print(sum)
if(count != 0) sum <- sum*j
print(sum)
}
}
smallestNumberEvenlyDivisiblefrom1ToN <- function(N) {
count <- 0
sum <- 1
for (i in 1:N) {
print(i)
for (j in 1:i) {
print(j)
if(j %% i == 0) count++
}
print(sum)
if(count != 0) sum <- sum*j
print(sum)
}
}
