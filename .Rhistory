for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j)) && (isPrimeNumber(p)) tmp <- c(tmp, p)
}
prod(1:4)
tmp <- c(1,2)
for (i in 3:10)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && (isPrimeNumber(p)) tmp <- c(tmp, p)
}
prod(1:4)
tmp <- c(1,2)
for (i in 3:10)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p)
}
tmp
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p)
}
tmp
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
comment(sprintf("i = %d", i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p)
}
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
comment(sprintf("i = %d", i))
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p)
}
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p)
}
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p) else tmp <- c(tmp, j)
}
tmp
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((i %% j == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p) else tmp <- c(tmp, j)
print(tmp)
}
3 %% 2
1.5 %% 1.5
1.5 %% 1
prod(1:4)
tmp <- c(1,2)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((p %% 1 == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p) else tmp <- c(tmp, j)
print(tmp)
}
prod(1:4)
tmp <- c(1)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((p %% 1 == 0) && (p < j) && isPrimeNumber(p)) tmp <- c(tmp, p) else tmp <- c(tmp, j)
print(tmp)
}
prod(1:4)
tmp <- c(1)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((p %% 1 == 0) && (p < j) && (p != 1) isPrimeNumber(p)) tmp <- c(tmp, p) else tmp <- c(tmp, j)
print(tmp)
}
prod(1:4)
tmp <- c(1)
for (i in 3:4)
for (j in 2:i) {
print(i)
print(j)
p <- i/j
print(p)
if((p %% 1 == 0) && (p < j) && (p != 1) && isPrimeNumber(p)) tmp <- c(tmp, p) else tmp <- c(tmp, j)
print(tmp)
}
x <- c(1,2,3)
y <- c(1,2,2,3)
union(x,y)
intersect(x,y)
subset(x,y)
x & y
x && y
x || <
x || y
x | y
union(x, y)
is.element(x, y)
is.element(y, x)
is.element(y, x)[1]
is.element(y, x)[2]
is.element(y, x)[3]
x
y
tmp <- c(1)
for(i in 2:4)
while(!is.element(primeFactors(i), tmp)) print(primeFactors(i))
primeFactors(2)
tmp <- c(1)
tmp
primeFactors(2)
!is.element(2, tmp))
!is.element(2, tmp)
tmp <- c(tmp, 2)
tmp
primeFactors(6)
!is.element(2, tmp)
!is.element(primeFactors(6), tmp)
tmp <- c(tmp, primeFactors(6)[!is.element(primeFactors(6), tmp)])
tmp
tmp <- c(tmp, primeFactors(12)[!is.element(primeFactors(12), tmp)])
tmp
!is.element(primeFactors(12)
a
!is.element(primeFactors(12), tmp)
primeFactors(12)
tmp <- c(tmp, primeFactors(33)[!is.element(primeFactors(33), tmp)])
tmp
tmp <- c(1)
tmp <- c(tmp, primeFactors(2)[!is.element(primeFactors(2), tmp)])
tmp
tmp <- c(tmp, primeFactors(3)[!is.element(primeFactors(3), tmp)])
tmp <- c(tmp, primeFactors(4)[!is.element(primeFactors(4), tmp)])
tmp
setdiff(x,y)
x <- c(1,2,3)
y <- c(1,2,2,3)
x
y
setdiff(x, y)
setdiff(y, x)
setequal(y, x)
install.packages("vecsets")
install.packages(vecsets)
install.packages("vecsets")
library(vecsets)
vintersect(x, y, multiple = TRUE)
X
x
y
vintersect(x, y, multiple = TRUE)
vunion(x,y)
N <- 4
tmp <- 0
for(i in 1:4)
tmp <- vunion(tmp, primeFactors(i))
N <- 4
tmp <- 0
for(i in 1:4)
tmp <- vunion(tmp, primeFactors(i))
N <- 4
tmp <- 0
for(i in 1:4) tmp <- vunion(tmp, primeFactors(i))
N <- 4
tmp <- 0
for(i in 1:N) tmp <- vunion(tmp, primeFactors(i))
i
primeFactors(1)
primeFactors(1)
primeFactors(2)
primeFactors <- function(x) {
if(x==1) return(1)
y <- distinctPrimeFactors(x)
for(i in y) {
pot <- 2
result <- x/(i^pot)
while (round(result) == result) {
y <- c(y, i)
pot <- pot+1
result <- x/(i^pot)
}
}
return(sort(y))
}
primeFactors(1)
N <- 4
tmp <- 0
for(i in 1:N) tmp <- vunion(tmp, primeFactors(i))
tmp
N <- 6
tmp <- 0
for(i in 1:N) tmp <- vunion(tmp, primeFactors(i))
tmp
smallestNumberEvenlyDivisibleBy1ToN <- function(N) {
tmp <- 1
for(i in 2:N) tmp <- vunion(tmp, primeFactors(i))
return(prod(tmp))
}
smallestNumberEvenlyDivisibleBy1ToN(3)
smallestNumberEvenlyDivisibleBy1ToN(7)
smallestNumberEvenlyDivisibleBy1ToN(20)
smallestNumberEvenlyDivisibleBy1ToN(20)
10^9
1.2*(10^9)
1.2*(10^9)+45
as.integer(1.2*(10^9)-45)
as.integer(1.2*(10^9)-4)
as.integer(1.2*(10^9))
as.integer(1.2*(10^9)+1000)
as.integer(1.3*(10^9)+1000)
as.integer(1.3*(10^10)+1000)
as.integer(1.2*(10^10)+1000)
as.integer(1.2*(10^9))
as.integer(1.5*(10^9))
as.integer(5*(10^9))
as.integer(4*(10^9))
as.integer(2.5*(10^9))
as.integer(2.2*(10^9))
as.integer(2*(10^9))
as.integer(2.1*(10^9))
as.integer(2.2*(10^9))
as.integer(2.19*(10^9))
as.integer(2.12*(10^9))
as.integer(2.16*(10^9))
as.integer(2.14*(10^9))
as.integer(2.15*(10^9))
as.integer(2.149*(10^9))
as.integer(2.141*(10^9))
as.integer(2.142*(10^9))
as.integer(2.143*(10^9))
as.integer(2.144*(10^9))
as.integer(2.148*(10^9))
as.integer(2.147*(10^9))
as.integer(2.1479*(10^9))
as.integer(2.1471*(10^9))
as.integer(2.1478*(10^9))
as.integer(2.1476*(10^9))
as.integer(2.1474*(10^9))
as.integer(2.1475*(10^9))
as.integer(2.1474*(10^9))
squareOfSum1ToN <- function(N) {
x <- c(1:N)
y <- sum(x)
print(y)
z <- y^2
print(z)
return(z)
}
squareOfSum1ToN(10)
squareOfSum1ToN(100)
squareOfSum1ToN <- function(x) {
x <- c(1:N)
y <- sum(x)
z <- y^2
return(z)
}
x <- c(1:5)
y <- x.^2
x <- c(1:5)
y <- x.^2
y <- x^2
y
sumOfSquares1ToN <- function(x) {
x <- c(1:N)
y <- x^2
z <- sum(y)
return(z)
}
sumOfSquares1ToN(10)
sumOfSquares1ToN <- function(N) {
x <- c(1:N)
y <- x^2
z <- sum(y)
return(z)
}
sumOfSquares1ToN(10)
sumOfSquares1ToN(100)
# The sum of the squares of the first ten natural numbers is,
# 12 + 22 + ... + 102 = 385
#
# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)2 = 552 = 3025
#
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
#
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
squareOfSum1ToN <- function(x) {
x <- c(1:N)
y <- sum(x)
z <- y^2
return(z)
}
squareOfSum1ToN(100)
sumOfSquares1ToN <- function(N) {
x <- c(1:N)
y <- x^2
z <- sum(y)
return(z)
}
sumOfSquares1ToN(100)
squareOfSum1ToN(100) - sumOfSquares1ToN(100)
squareOfSum1ToN(100)
# The sum of the squares of the first ten natural numbers is,
# 12 + 22 + ... + 102 = 385
#
# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)2 = 552 = 3025
#
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
#
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
squareOfSum1ToN <- function(N) {
x <- c(1:N)
y <- sum(x)
z <- y^2
return(z)
}
squareOfSum1ToN(100)
sumOfSquares1ToN <- function(N) {
x <- c(1:N)
y <- x^2
z <- sum(y)
return(z)
}
sumOfSquares1ToN(100)
squareOfSum1ToN(100) - sumOfSquares1ToN(100)
NthPrimeNumber <- function(N) {
i <- 0
ind <- 0
while (ind < N) {
i++
if(isPrimeNumber(i)) {
ind++
x <- i
}
}
return(x)
}
NthPrimeNumber(5)
NthPrimeNumber <- function(N) {
i <- 0
ind <- 0
while (ind < N) {
i = i + 1
if(isPrimeNumber(i)) {
ind = ind + 1
x <- i
}
}
return(x)
}
NthPrimeNumber(5)
NthPrimeNumber <- function(N) {
i <- 0
ind <- 0
while (ind < N) {
i = i + 1
if(isPrimeNumber(i)) {
ind = ind + 1
x <- i
print(x)
}
}
return(x)
}
NthPrimeNumber(5)
NthPrimeNumber(100)
NthPrimeNumber(10001)
NthPrimeNumber <- function(N) {
i <- 0
ind <- 0
while (ind < N) {
i = i + 1
if(isPrimeNumber(i)) {
ind = ind + 1
x <- i
}
}
return(x)
}
NthPrimeNumber(10001)
NthPrimeNumber <- function(N) {
i <- 0
ind <- 0
while (ind < N) {
i = i + 1
if(isPrimeNumber(i)) {
ind = ind + 1
x <- i
print(i)
}
}
return(x)
}
NthPrimeNumber(100)
NthPrimeNumber(10)
NthPrimeNumber(6)
NthPrimeNumber <- function(N) {
i <- 104729
ind <- 0
while (ind < N) {
i = i + 1
if(isPrimeNumber(i)) {
ind = ind + 1
x <- i
}
}
return(x)
}
NthPrimeNumber(1)
as.character(123456)
x <- as.character(123456)
length(x)
nchar(x)
adjacentNDigitsInSeriesWithMaxProduct <- function(series, N){
sereies <- as.character(series)
if(nchar(series) < N) return("series too small")
}
adjacentNDigitsInSeriesWithMaxProduct(1234, 5)
adjacentNDigitsInSeriesWithMaxProduct <- function(series, N){
sereies <- as.character(series)
if(nchar(series) < N) return("No result! Series too small")
}
adjacentNDigitsInSeriesWithMaxProduct(1234, 5)
x[1]
x
as.vector(x)
strsplit(x)
strsplit(x, split = "")
unlist(strsplit(x, split = ""))
y <- unlist(strsplit(x, split = ""))
y
as.numeric(y)
prod(y)
prod(as.numeric(y))
y
z <- as.numeric(y)
prod(z)
z
length(z)
adjacentNDigitsInSeriesWithMaxProduct <- function(series, N){
series <- as.character(series)
if(nchar(series) < N) return("No result! Series too small")
if(nchar(series) = N) {
return(prod(as.numeric(unlist(strsplit(series, split = "")))))
}
return("TO DO")
}
adjacentNDigitsInSeriesWithMaxProduct <- function(series, N){
series <- as.character(series)
if(nchar(series) < N) return("No result! Series too small")
if(nchar(series) == N) {
return(prod(as.numeric(unlist(strsplit(series, split = "")))))
}
return("TO DO")
}
adjacentNDigitsInSeriesWithMaxProduct(12345,5)
adjacentNDigitsInSeriesWithMaxProduct(12345,4)
adjacentNDigitsInSeriesWithMaxProduct(12345,3)
adjacentNDigitsInSeriesWithMaxProduct(12345,8)
